// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpack/pack/image (interfaces: Image2)

// Package mocks is a generated GoMock package.
package mocks

import (
	image "github.com/buildpack/pack/image"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockImage2 is a mock of Image2 interface
type MockImage2 struct {
	ctrl     *gomock.Controller
	recorder *MockImage2MockRecorder
}

// MockImage2MockRecorder is the mock recorder for MockImage2
type MockImage2MockRecorder struct {
	mock *MockImage2
}

// NewMockImage2 creates a new mock instance
func NewMockImage2(ctrl *gomock.Controller) *MockImage2 {
	mock := &MockImage2{ctrl: ctrl}
	mock.recorder = &MockImage2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImage2) EXPECT() *MockImage2MockRecorder {
	return m.recorder
}

// Label mocks base method
func (m *MockImage2) Label(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "Label", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockImage2MockRecorder) Label(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockImage2)(nil).Label), arg0)
}

// Name mocks base method
func (m *MockImage2) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockImage2MockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockImage2)(nil).Name))
}

// Rebase mocks base method
func (m *MockImage2) Rebase(arg0 string, arg1 image.Image2) error {
	ret := m.ctrl.Call(m, "Rebase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rebase indicates an expected call of Rebase
func (mr *MockImage2MockRecorder) Rebase(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebase", reflect.TypeOf((*MockImage2)(nil).Rebase), arg0, arg1)
}

// Save mocks base method
func (m *MockImage2) Save() (string, error) {
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockImage2MockRecorder) Save() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockImage2)(nil).Save))
}

// SetLabel mocks base method
func (m *MockImage2) SetLabel(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "SetLabel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLabel indicates an expected call of SetLabel
func (mr *MockImage2MockRecorder) SetLabel(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabel", reflect.TypeOf((*MockImage2)(nil).SetLabel), arg0, arg1)
}

// TopLayer mocks base method
func (m *MockImage2) TopLayer() (string, error) {
	ret := m.ctrl.Call(m, "TopLayer")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopLayer indicates an expected call of TopLayer
func (mr *MockImage2MockRecorder) TopLayer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopLayer", reflect.TypeOf((*MockImage2)(nil).TopLayer))
}
