// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpack/lifecycle/img (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	name "github.com/google/go-containerregistry/pkg/name"
	v1 "github.com/google/go-containerregistry/pkg/v1"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Image mocks base method
func (m *MockStore) Image() (v1.Image, error) {
	ret := m.ctrl.Call(m, "Image")
	ret0, _ := ret[0].(v1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Image indicates an expected call of Image
func (mr *MockStoreMockRecorder) Image() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Image", reflect.TypeOf((*MockStore)(nil).Image))
}

// Ref mocks base method
func (m *MockStore) Ref() name.Reference {
	ret := m.ctrl.Call(m, "Ref")
	ret0, _ := ret[0].(name.Reference)
	return ret0
}

// Ref indicates an expected call of Ref
func (mr *MockStoreMockRecorder) Ref() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockStore)(nil).Ref))
}

// Write mocks base method
func (m *MockStore) Write(arg0 v1.Image) error {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockStoreMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStore)(nil).Write), arg0)
}
